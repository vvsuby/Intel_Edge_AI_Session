# -*- coding: utf-8 -*-
"""exam10_iris_classfication.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wgGyrv3zX63WWWQnsp7TK_vjVUgwLTjO
"""

import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder

iris = load_iris()
print(type(iris))
print('Data shape', iris.data.shape)
print('Label', iris.target.shape)
print(iris)

import pandas as pd
iris_df = pd.DataFrame(iris.data, columns=iris.feature_names)
pd.plotting.scatter_matrix(iris_df, c=iris.target,
                           figsize=(7, 7), marker='0',
                           hist_kwds={'bins':20}, s=60, alpha=0.8)
plt.show()

iris_df.info()

x = iris.data
y = iris.target.reshape(-1, 1)
y.shape

encoder = OneHotEncoder(sparse=False)
encoded_y = encoder.fit_transform(y)
print(encoded_y.shape)
print(encoded_y[0:5])

x_train, x_test, y_train, y_test = train_test_split(
    x, encoded_y, test_size=0.2)
print(x_train.shape, y_train.shape)
print(x_test.shape, y_test.shape)

model = Sequential()
model.add(Dense(128, input_dim=4, activation='relu'))
model.add(Dense(256, activation='relu'))
model.add(Dense(512, activation='relu'))
model.add(Dense(256, activation='relu'))
model.add(Dense(128, activation='relu'))
model.add(Dense(3, activation='softmax'))
model.summary()

opt = Adam(lr=0.001)
model.compile(opt, loss='categorical_crossentropy',
              metrics=['accuracy'])
fit_hist = model.fit(x_train, y_train, batch_size=30, epochs=20, verbose=1)

score = model.evaluate(x_test, y_test,verbose=0)
print('Final test set accuracy :', score[1])

plt.plot(fit_hist.history['accuracy'])
plt.show()

labels = iris.target_names
labels

my_sample = np.random.randint(30)
sample = x_test[my_sample]
print('sample data', sample)
sample = sample.reshape(1, 4)
print('reshaped data', sample)
pred = model.predict(sample)
print('pred is ', pred)
print('actual is :', y_test[my_sample])
print('Target :', labels[np.argmax(y_test[my_sample])])
print('Prediction after learning is :', labels[np.argmax(pred)])

